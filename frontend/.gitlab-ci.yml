default:
  cache:
    paths:
      - frontend/dist/frontend

variables:
  VERSION: 1.0.${CI_PIPELINE_ID}

stages:
   - build
   - test
   - release
   - notify
   - deploy

include:
  - template: Security/SAST.gitlab-ci.yml
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'

build:
   stage: build
   image: docker:20.10.11-dind-rootless
   before_script:
    - until docker info; do sleep 1; done
    # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
   script:
    - cd frontend
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA
   rules: # rules и only в данных случаях взаимозаменяемы
      - changes:
           - frontend/*
   cache:
     paths:
       - frontend/dist/frontend


sonarqube-sast:
  stage: test
  only:
    changes:
      - frontend/*
  image: node:16.0.0-buster # тот самый docker-образ, о котором мы все узнаем в будущем
  script:
    - cd frontend
    - npm install -g sonarqube-scanner
    - >
      sonar-scanner
      -Dsonar.projectKey=${SONAR_FRONT_KEY}
      -Dsonar.sources=.
      -Dsonar.host.url=${SONAR_URL}
      -Dsonar.login=${SONAR_FRONT_LOGIN}
      -Dsonar.projectName=09_IVANSHKURKO_FRONTEND
  needs:
    - build



upload-frontend-latest:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA
    # если образ прошел проверки в CI (сканирование, тесты и т.д), то тегаем latest
    - docker tag $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/sausage-frontend:latest
    - docker push $CI_REGISTRY_IMAGE/sausage-frontend:latest

notification:
  stage: notify
  only:
    changes:
    - frontend/*
  script: |
    ARTIFACT_URL=${NEXUS_REPO_URL}/10-sausage-store-shkurko-ivan-frontend/sausage-store/${VERSION}/sausage-store-${VERSION}.tar.gz
    curl -X POST -H "Content-type: application/json"  --data '{"text": " Вышла новая версия <'"$ARTIFACT_URL"'|frontend> сосичной '"$VERSION"' "}' https://hooks.slack.com/services/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
  needs:
    - upload-frontend-latest

deploy-frontend:
  stage: deploy
  image: alpine:3.15.0
  before_script:
    - apk add openssh-client bash docker docker-compose
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - docker context create remote --docker "host=ssh://${DEV_USER}@${DEV_HOST}"
    - docker --context remote login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker-compose -H ssh://${DEV_USER}@${DEV_HOST} rm --stop --force frontend
    - docker-compose -H ssh://${DEV_USER}@${DEV_HOST} pull frontend
    - docker-compose -H ssh://${DEV_USER}@${DEV_HOST} up --detach --force-recreate frontend
#  script:
#    - ssh ${DEV_USER}@${DEV_HOST}
#      "/bin/bash -s " < ./frontend/frontend_deploy.sh