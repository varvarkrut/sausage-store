variables:
   SAST_JAVA_VERSION: 17
   VERSION: 1.0.${CI_PIPELINE_ID}
   MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
   SAST_EXCLUDED_ANALYZERS: "nodejs-scan"

include:
  - template: Security/SAST.gitlab-ci.yml
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'

stages:
   - build
   - test
   - dockerize
   - release
   - deploy

build-code-job:
  stage: build
  script:
    - echo "ARTIFACT_JOB_ID=${CI_JOB_ID}" > CI_JOB_ID.txt
    - cd backend-report
    - mvn package -Dversion.application=${VERSION} -DskipTests -Dmaven.repo.local=${MAVEN_REPO_PATH}
    - cd .. 
    - mkdir sausage-store-report-${VERSION}
    - mv backend-report/target/sausage-store-report-${VERSION}.jar sausage-store-report-${VERSION}/sausage-store-report-${VERSION}.jar
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/.m2/
      - sausage-store-report-${VERSION}/sausage-store-report-${VERSION}.jar
    reports:
      dotenv: CI_JOB_ID.txt
  rules:
    - changes:
      - backend-report/**/*

spotbugs-sast:
  dependencies:
    - build-code-job
  variables:
    COMPILE: "false"

sonar-scan-backend-report:
  stage: test
  image: maven:3.8-openjdk-16
  cache:
    key: ${CI_JOB_NAME}
    paths:
      - .sonar/cache
  script:
    - cd backend-report
    - >
      mvn verify sonar:sonar 
      -Dversion.application=${VERSION} 
      -Dsonar.qualitygate.wait=true 
      -Dsonar.projectKey=${SONAR_PROJECT_KEY_BACK_REPORT}
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${SONAR_LOGIN}
  rules:
    - changes:
      - backend-report/**/*
  allow_failure: true
  dependencies:
    - build-code-job

dockerize-backend-report:
  stage: dockerize
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd backend-report
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/sausage-backend-report:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE/sausage-backend-report:$CI_COMMIT_SHA
  rules:
    - changes:
      - backend-report/**/*
  dependencies:
    - build-code-job

upload-backend-report:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/sausage-backend-report:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE/sausage-backend-report:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/sausage-backend-report:latest
    - docker push $CI_REGISTRY_IMAGE/sausage-backend-report:latest
  rules:
    - changes:
      - backend-report/**/*

deploy-backend-report:
  stage: deploy
  image: alpine:3.15.0
  before_script:
    - apk add openssh-client bash docker docker-compose
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=sausage-store jwt=$CI_JOB_JWT)"
    - export "SPRING_DATA_MONGODB_URI=$(vault kv get -field=spring.data.mongodb.uri secret/mongo-uri)"
    - docker context create remote --docker "host=ssh://${DEV_USER}@${DEV_HOST}"
    - docker --context remote login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker-compose -H ssh://${DEV_USER}@${DEV_HOST} rm --stop --force backend-report
    - docker-compose -H ssh://${DEV_USER}@${DEV_HOST} pull backend-report
    - docker-compose -H ssh://${DEV_USER}@${DEV_HOST} up --detach --force-recreate backend-report
