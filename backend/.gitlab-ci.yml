cache:
  paths:
    - ${CI_PROJECT_DIR}/.m2/repository

variables:
   VERSION: 1.0.${CI_PIPELINE_ID}
   MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
   JAVA_OPTS: -XX:MaxRAMPercentage=90 # для того, чтобы Maven не съел всю свободную оперативку

include:
  - template: Security/SAST.gitlab-ci.yml
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'

stages:
   - build
   - test
   - release
   - notify
   - deploy

build:
   stage: build
   image: docker:20.10.11-dind-rootless
   before_script:
    - until docker info; do sleep 1; done
    # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
   script:
    - cd backend
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA
   rules: # rules и only в данных случаях взаимозаменяемы
      - changes:
           - backend/*
   cache:
     paths:
       - backend/target/sausage-store-$VERSION-SNAPSHOT.jar
       - ${CI_PROJECT_DIR}/.m2/ # сохранение зависимостей для SAST


spotbugs-sast:
  variables:
    COMPILE: "false"
    SAST_JAVA_VERSION: 11
    MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository # не забудьте при сборке также указывать эту папку через аргумент -Dmaven.repo.local

sonarqube-sast:
  stage: test
  only:
    changes:
      - backend/*
  image: maven:3.8-openjdk-16 # тот самый docker-образ, о котором мы все узнаем в будущем
  script:
    - cd backend
    - >
      mvn verify sonar:sonar -Dsonar.qualitygate.wait=true
      -Dsonar.projectKey=${SONAR_KEY}
      -Dsonar.host.url=${SONAR_URL}
      -Dsonar.login=${SONAR_LOGIN}
      -Dsonar.projectName=09_IVANSHKURKO_BACKEND
  needs:
    - build


upload-backend-latest:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA
    # если образ прошел проверки в CI (сканирование, тесты и т.д), то тегаем latest
    - docker tag $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/sausage-backend:latest
    - docker push $CI_REGISTRY_IMAGE/sausage-backend:latest

notification:
  stage: notify
  only:
    changes:
    - backend/*
  script: |
    ARTIFACT_URL=${NEXUS_REPO_URL}/10-sausage-store-shkurko-ivan-backend-release/com/yandex/practicum/devops/sausage-store/${VERSION}/sausage-store-${VERSION}.jar
    curl -X POST -H "Content-type: application/json"  --data '{"text": " Вышла новая версия <'"$ARTIFACT_URL"'|backend> сосичной '"$VERSION"'   "}' https://hooks.slack.com/services/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
  needs:
    - upload-backend-latest

deploy-backend:
  stage: deploy
  image: vault:1.11.3
  before_script:
    - apk update && apk add openssh-client bash docker docker-compose curl
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=sausage-store jwt=$CI_JOB_JWT)"
    - export "VERSION=${VERSION}"
    - export "SPRING_DATASOURCE_URL=${PSQL_DATASOURCE}"
    - export "SPRING_DATASOURCE_USERNAME=$(vault kv get -field=spring.datasource.username secret/pg-login)"
    - export "SPRING_DATASOURCE_PASSWORD=$(vault kv get -field=spring.datasource.password secret/pg-password)"
    - export "SPRING_DATA_MONGODB_URI=$(vault kv get -field=spring.data.mongodb.uri secret/mongo-uri)"
    - export "REGISTRY_ADDRESS=${CI_REGISTRY_IMAGE}"
    - docker context create remote --docker "host=ssh://${DEV_USER}@${DEV_HOST}"
    - docker --context remote login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker -H ssh://${DEV_USER}@${DEV_HOST} ps
    - docker-compose -H ssh://${DEV_USER}@${DEV_HOST} ps
  script:
#    - docker-compose -H ssh://${DEV_USER}@${DEV_HOST} rm --stop --force backend
#    - docker-compose -H ssh://${DEV_USER}@${DEV_HOST} pull backend;
#    - docker-compose -H ssh://${DEV_USER}@${DEV_HOST} up --detach --force-recreate backend
    - if ! [ -z $(docker -H ssh://${DEV_USER}@${DEV_HOST} ps --quiet --filter name=sausage-store_backend-green_1) ]; then
        docker-compose -H ssh://${DEV_USER}@${DEV_HOST} rm --stop --force backend-blue;
        docker-compose -H ssh://${DEV_USER}@${DEV_HOST} pull backend-blue;
        docker-compose -H ssh://${DEV_USER}@${DEV_HOST} up --detach --force-recreate backend-blue;
        until [ -z $(docker -H ssh://${DEV_USER}@${DEV_HOST} ps --quiet --filter name=sausage-store_backend-blue --filter health=healthy) ]; echo "Wait until backend-blue will be healthy..."; do sleep 10; done;
        docker-compose -H ssh://${DEV_USER}@${DEV_HOST} rm --stop --force backend-green;
      elif ! [ -z $(docker -H ssh://${DEV_USER}@${DEV_HOST} ps --quiet --filter name=sausage-store_backend-blue_1) ]; then
        docker-compose -H ssh://${DEV_USER}@${DEV_HOST} rm --stop --force backend-green;
        docker-compose -H ssh://${DEV_USER}@${DEV_HOST} pull backend-green;
        docker-compose -H ssh://${DEV_USER}@${DEV_HOST} up --detach --force-recreate backend-green;
        until [ -z $(docker -H ssh://${DEV_USER}@${DEV_HOST} ps --quiet --filter name=sausage-store_backend-green --filter health=healthy) ]; echo "Wait until backend-green will be healthy..."; do sleep 10; done;
        docker-compose -H ssh://${DEV_USER}@${DEV_HOST} rm --stop --force backend-blue;
      else
        docker-compose -H ssh://${DEV_USER}@${DEV_HOST} pull backend-blue;
        docker-compose -H ssh://${DEV_USER}@${DEV_HOST} up --detach --force-recreate backend-blue;
      fi
#    - docker context create remote --docker "host=ssh://${DEV_USER}@${DEV_HOST}"
#    - docker --context remote login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#  script:
#    - export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=sausage-store jwt=$CI_JOB_JWT)"
#    - ssh ${DEV_USER}@${DEV_HOST}
#      "export "VERSION=${VERSION}";
#       export "SPRING_DATASOURCE_URL=${PSQL_DATASOURCE}";
#       export "SPRING_DATASOURCE_USERNAME=$(vault kv get -field=spring.datasource.username secret/pg-login)";
#       export "SPRING_DATASOURCE_PASSWORD=$(vault kv get -field=spring.datasource.password secret/pg-password)";
#       export "SPRING_DATA_MONGODB_URI=$(vault kv get -field=spring.data.mongodb.uri secret/mongo-uri)";
#       export "REGISTRY_ADDRESS=${CI_REGISTRY_IMAGE}";
#      /bin/bash -s " < ./backend/backend_deploy.sh